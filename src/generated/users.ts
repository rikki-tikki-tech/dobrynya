import { FieldMask } from './google/protobuf/field_mask';
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.0
//   protoc               v3.21.12
// source: users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { DateMessage } from './google/type/date';

export const protobufPackage = 'koschei.ports.grpc.proto.v1';

/** A user resource. */
export interface User {
  name: string;
  email: string;
  password: string;
  firstName: string;
  birthdayDate: DateMessage | undefined;
}

export interface GetUserRequest {
  name: string;
}

export interface UpdateUserRequest {
  user: User | undefined;
  updateMask: FieldMask | undefined;
}

export interface SignInUserRequest {
  email: string;
  password: string;
}

export interface SignInUserResponse {
  token: string;
}

export interface AuthenticateUserRequest {
  token: string;
}

export interface AuthenticateUserResponse {
  name: string;
}

export interface SignUpUserRequest {
  user: User | undefined;
}

export const KOSCHEI_PORTS_GRPC_PROTO_V1_PACKAGE_NAME =
  'koschei.ports.grpc.proto.v1';

export interface UsersClient {
  getUser(request: GetUserRequest): Observable<User>;

  authenticateUser(
    request: AuthenticateUserRequest,
  ): Observable<AuthenticateUserResponse>;

  updateUser(request: UpdateUserRequest): Observable<User>;

  signInUser(request: SignInUserRequest): Observable<SignInUserResponse>;

  signUpUser(request: SignUpUserRequest): Observable<User>;
}

export interface UsersController {
  getUser(request: GetUserRequest): Promise<User> | Observable<User> | User;

  authenticateUser(
    request: AuthenticateUserRequest,
  ):
    | Promise<AuthenticateUserResponse>
    | Observable<AuthenticateUserResponse>
    | AuthenticateUserResponse;

  updateUser(
    request: UpdateUserRequest,
  ): Promise<User> | Observable<User> | User;

  signInUser(
    request: SignInUserRequest,
  ):
    | Promise<SignInUserResponse>
    | Observable<SignInUserResponse>
    | SignInUserResponse;

  signUpUser(
    request: SignUpUserRequest,
  ): Promise<User> | Observable<User> | User;
}

export function UsersControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'getUser',
      'authenticateUser',
      'updateUser',
      'signInUser',
      'signUpUser',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('Users', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('Users', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USERS_SERVICE_NAME = 'Users';
